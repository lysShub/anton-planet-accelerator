//go:build linux
// +build linux

package server

import (
	"testing"

	"github.com/stretchr/testify/require"
	"golang.org/x/net/bpf"
	"gvisor.dev/gvisor/pkg/tcpip/header"
)

func Test_SkipLocalPorts(t *testing.T) {

	var ins = bpfSkipLocalPorts(1, 2)

	vm, err := bpf.NewVM(ins)
	require.NoError(t, err)

	for _, e := range []struct {
		Ret uint16
		IP  []byte
	}{
		{
			Ret: 0,
			IP: header.IPv4{
				0x45, 0x00, 0x00, 0x3c, 0x92, 0xe8, 0x00, 0x00,
				0x40, 0x06, 0x49, 0x9c, 0xac, 0x19, 0x20, 0x01,
				0xac, 0x19, 0x26, 0x04, 0x4e, 0x12, 0x00, 0x01, // dst port
				0x3d, 0xce, 0x40, 0x70, 0x00, 0x00, 0x00, 0x00,
				0xa0, 0x02, 0x74, 0x80, 0x9a, 0x01, 0x00, 0x00,
				0x02, 0x04, 0x05, 0xd8, 0x01, 0x01, 0x08, 0x0a,
				0x97, 0x66, 0x1a, 0xdc, 0x00, 0x00, 0x00, 0x00,
				0x01, 0x03, 0x03, 0x07,
			},
		},
		{
			Ret: 0,
			IP: header.IPv4{
				0x45, 0x00, 0x00, 0x3c, 0x92, 0xe8, 0x00, 0x00,
				0x40, 0x06, 0x49, 0x9c, 0xac, 0x19, 0x20, 0x01,
				0xac, 0x19, 0x26, 0x04, 0x4e, 0x12, 0x00, 0x02,
				0x3d, 0xce, 0x40, 0x70, 0x00, 0x00, 0x00, 0x00,
				0xa0, 0x02, 0x74, 0x80, 0x9a, 0x01, 0x00, 0x00,
				0x02, 0x04, 0x05, 0xd8, 0x01, 0x01, 0x08, 0x0a,
				0x97, 0x66, 0x1a, 0xdc, 0x00, 0x00, 0x00, 0x00,
				0x01, 0x03, 0x03, 0x07,
			},
		},
		{
			Ret: 0xffff,
			IP: header.IPv4{
				0x45, 0x00, 0x00, 0x3c, 0x92, 0xe8, 0x00, 0x00,
				0x40, 0x06, 0x49, 0x9c, 0xac, 0x19, 0x20, 0x01,
				0xac, 0x19, 0x26, 0x04, 0x4e, 0x12, 0x00, 0x03,
				0x3d, 0xce, 0x40, 0x70, 0x00, 0x00, 0x00, 0x00,
				0xa0, 0x02, 0x74, 0x80, 0x9a, 0x01, 0x00, 0x00,
				0x02, 0x04, 0x05, 0xd8, 0x01, 0x01, 0x08, 0x0a,
				0x97, 0x66, 0x1a, 0xdc, 0x00, 0x00, 0x00, 0x00,
				0x01, 0x03, 0x03, 0x07,
			},
		},
	} {

		n, err := vm.Run(e.IP)
		require.NoError(t, err)
		require.Equal(t, e.Ret, uint16(n))

	}
}
